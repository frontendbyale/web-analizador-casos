---
// src/pages/index.astro
import Layout from '../layouts/Layout.astro';
import Nav from '../components/Nav.astro';
import AnalizadorCasos from '../components/AnalizadorCasos.astro';
import AnalisisSemanal from '../components/AnalisisSemanal.astro';
---

<Layout title="Panel de Análisis de Casos">
    <main class="w-full">
        <Nav />

        <div id="content-analisis" class="tab-content">
            <AnalizadorCasos />
        </div>
        <div id="content-reclamos" class="tab-content hidden">
            <AnalisisSemanal />
        </div>
    </main>

    <script>
        import Papa from 'papaparse'; // Importar PapaParse aquí para ambos analizadores

        // --- VARIABLE GLOBAL PARA COMPARTIR DATOS ---
        let processedDataStore = null;

        // =================================================================
        // LÓGICA PARA LA NAVEGACIÓN Y MODO OSCURO (SIN CAMBIOS)
        // =================================================================
        const tabs = [
            { button: document.getElementById('tab-analisis'), content: document.getElementById('content-analisis') },
            { button: document.getElementById('tab-reclamos'), content: document.getElementById('content-reclamos') }
        ];
        const activeClasses = 'text-indigo-600 dark:text-indigo-400 border-indigo-500';
        const inactiveClasses = 'text-slate-500 hover:text-slate-700 dark:text-slate-400 dark:hover:text-slate-300 border-transparent hover:border-slate-300 dark:hover:border-slate-600';
        tabs.forEach(tab => {
            if (tab.button) {
                tab.button.addEventListener('click', () => {
                    tabs.forEach(t => {
                        if (t.content) t.content.classList.add('hidden');
                        if (t.button) t.button.className = t.button.className.replace(activeClasses, inactiveClasses);
                    });
                    if (tab.content) tab.content.classList.remove('hidden');
                    if (tab.button) tab.button.className = tab.button.className.replace(inactiveClasses, activeClasses);
                });
            }
        });
        const themeToggleBtn = document.getElementById('theme-toggle');
        function applyTheme(isDark) {
            const darkIcon = document.getElementById('theme-toggle-dark-icon');
            const lightIcon = document.getElementById('theme-toggle-light-icon');
            if (isDark) {
                document.documentElement.classList.add('dark');
                if(lightIcon) lightIcon.classList.remove('hidden');
                if(darkIcon) darkIcon.classList.add('hidden');
                localStorage.setItem('color-theme', 'dark');
            } else {
                document.documentElement.classList.remove('dark');
                if(lightIcon) lightIcon.classList.add('hidden');
                if(darkIcon) darkIcon.classList.remove('hidden');
                localStorage.setItem('color-theme', 'light');
            }
        }
        const isDarkMode = localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches);
        applyTheme(isDarkMode);
        if(themeToggleBtn) {
            themeToggleBtn.addEventListener('click', () => applyTheme(!document.documentElement.classList.contains('dark')));
        }

        // =================================================================
        // LÓGICA PARA EL ANALIZADOR GENERAL (PESTAÑA 1)
        // =================================================================
        const processBtn = document.getElementById('processBtn');
        const csvFileInput = document.getElementById('csvFile');
        const monthSelect = document.getElementById('monthSelect');
        const yearInput = document.getElementById('yearInput');
        const resultsDiv = document.getElementById('results');

        if(processBtn) {
             // Tu lógica para processData, displayResults y el listener de processBtn va aquí...
             // ... La única diferencia es que al final del 'complete' de PapaParse, guardamos los datos:
            processBtn.addEventListener('click', () => {
                const file = csvFileInput.files[0];
                if (!file) { alert("Por favor, selecciona un archivo CSV."); return; }
                const selectedMonth = parseInt(monthSelect.value, 10);
                const selectedYear = parseInt(yearInput.value, 10);
                if (!selectedYear) { alert("Por favor, introduce un año válido."); return; }
                processBtn.disabled = true;
                processBtn.textContent = "Procesando...";
                resultsDiv.innerHTML = `<div class="text-center text-slate-500 dark:text-slate-400">Analizando datos...</div>`;
                Papa.parse(file, {
                    header: true, skipEmptyLines: true,
                    complete: (results) => {
                        try {
                            // ** CAMBIO CLAVE: Guardamos los datos crudos para reutilizarlos **
                            processedDataStore = results.data; 
                            const analysis = processData(processedDataStore, selectedMonth, selectedYear);
                            displayResults(analysis, selectedMonth, selectedYear);
                             // Habilitar el otro botón
                            const weeklyBtn = document.getElementById('processBtnWeek');
                            if(weeklyBtn) weeklyBtn.disabled = false;
                        } catch (error) {
                            console.error("Error:", error);
                            resultsDiv.innerHTML = `<p class="text-red-500 font-semibold">Ocurrió un error: ${error.message}</p>`;
                        } finally {
                            processBtn.disabled = false;
                            processBtn.textContent = "Analizar Período";
                        }
                    }
                });
            });
            // Aquí van las funciones completas de processData y displayResults del analizador general
            // que ya teníamos, sin cambios en su interior.

             function processData(data, month, year) {
        // ... toda la lógica de procesamiento sigue igual ...
        const timeBuckets = ['Menos de 24hs', 'Entre 24hs y 48hs', 'Entre 48hs y 72hs', 'Más de 72hs'];
        const getTimeBucket = (hours) => {
            if (hours <= 24) return timeBuckets[0]; if (hours <= 48) return timeBuckets[1];
            if (hours <= 72) return timeBuckets[2]; return timeBuckets[3];
        };
        const createStatObject = () => Object.fromEntries(timeBuckets.map(bucket => [bucket, 0]));
        let processedData = data.map(row => ({ ...row,
            'Nro de Case': row['Nro. Case'] ? parseInt(row['Nro. Case'].match(/>(\d+)</)?.[1], 10) : null,
            'Fecha de Creacion': row['Fecha Creación (FFHH)'] ? new Date(row['Fecha Creación (FFHH)']) : null,
            'Fecha de Cierre': row['Fecha Cierre'] ? new Date(row['Fecha Cierre']) : null,
        })).filter(row => row['Nro de Case']);
        const uniqueCases = Array.from(new Map(processedData.map(item => [item['Nro de Case'], item])).values());
        const filteredCases = uniqueCases.filter(row => {
            const d = row['Fecha de Creacion'];
            return d && d.getFullYear() === year && d.getMonth() === month;
        });
        const closedCases = filteredCases.filter(c => c['Estado Case'] === 'Closed');
        const agents = ['jsotelo', 'cyvarela', 'fortega'];
        const overallAgentActivity = Object.fromEntries(agents.map(agent => [agent, { created: 0, closed: 0 }]));
        filteredCases.forEach(c => {
            if (agents.includes(c['Empleado Creación'])) overallAgentActivity[c['Empleado Creación']].created++;
            if (c['Estado Case'] === 'Closed' && agents.includes(c['Empleado Cierre'])) overallAgentActivity[c['Empleado Cierre']].closed++;
        });
        const overallClosureStats = createStatObject();
        closedCases.forEach(c => {
            if (c['Fecha de Cierre'] && c['Fecha de Creacion']) {
                const diffHours = (c['Fecha de Cierre'].getTime() - c['Fecha de Creacion'].getTime()) / 3600000;
                overallClosureStats[getTimeBucket(diffHours)]++;
            }
        });
        const agentPerformance = Object.fromEntries(agents.map(agent => [agent, { totalClosed: 0, overall: createStatObject(), byReason: {} }]));
        closedCases.forEach(c => {
            const closer = c['Empleado Cierre'];
            if (!agents.includes(closer) || !c['Fecha de Cierre'] || !c['Fecha de Creacion']) return;
            const diffHours = (c['Fecha de Cierre'].getTime() - c['Fecha de Creacion'].getTime()) / 3600000;
            const bucket = getTimeBucket(diffHours);
            const reason = c['Razón'] || 'No Especificado';
            agentPerformance[closer].totalClosed++;
            agentPerformance[closer].overall[bucket]++;
            if (!agentPerformance[closer].byReason[reason]) {
                agentPerformance[closer].byReason[reason] = { total: 0, stats: createStatObject() };
            }
            agentPerformance[closer].byReason[reason].total++;
            agentPerformance[closer].byReason[reason].stats[bucket]++;
        });
        const finalCsvData = filteredCases.map(c => ({
            'Modelo Comercial': c['Modelo Comercial'],'Segmento Comercial': c['Segmento Comercial'],'Cliente': c['Cliente'],
            'Nro de Case': c['Nro de Case'],'Estado de Case': c['Estado Case'],'Razon': c['Razón'],'Subrazon': c['Subrazón'],
            'Fecha de Creacion': c['Fecha de Creacion'] ? c['Fecha de Creacion'].toISOString().slice(0, 19).replace('T', ' ') : '',
            'Fecha de Cierre': c['Fecha de Cierre'] ? c['Fecha de Cierre'].toISOString().slice(0, 19).replace('T', ' ') : '',
            'Diagnostico': c['Diagnóstico'],'Solucion': c['Solución']
        }));

        return { filteredCases, closedCases, overallAgentActivity, overallClosureStats, agentPerformance, finalCsvData };
    }

    function displayResults(analysis, selectedMonth, selectedYear) {
        // ... la lógica de renderizado también sigue igual ...
        const { filteredCases, closedCases, overallAgentActivity, overallClosureStats, agentPerformance, finalCsvData } = analysis;
        const monthName = new Date(selectedYear, selectedMonth).toLocaleString('es-ES', { month: 'long' });
        const titleMonth = monthName.charAt(0).toUpperCase() + monthName.slice(1);
        let downloadHTML = '';
        if (finalCsvData.length > 0) {
            downloadHTML = `<div class="mt-8">
                <button id="downloadBtn" class="inline-flex items-center gap-2 bg-green-600 text-white font-bold py-3 px-5 rounded-lg hover:bg-green-700 transition-colors">
                    <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 9.707a1 1 0 011.414 0L9 11.293V3a1 1 0 112 0v8.293l1.293-1.586a1 1 0 111.414 1.414l-3 3.5a1 1 0 01-1.414 0l-3-3.5a1 1 0 010-1.414z" clip-rule="evenodd" /></svg>
                    Descargar CSV Procesado
                </button>
            </div>`;
        }
        resultsDiv.innerHTML = `
            <div class="bg-slate-100 dark:bg-slate-800/50 p-6 rounded-2xl shadow-md border border-slate-200 dark:border-slate-700">
                <h2 class="text-2xl font-bold text-slate-700 dark:text-slate-200 mb-4">Resumen General de ${titleMonth} de ${selectedYear}</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="grid grid-cols-2 gap-4 text-center">
                        <div class="bg-white dark:bg-slate-700/50 p-4 rounded-lg shadow"><div class="text-3xl font-bold text-indigo-600 dark:text-indigo-400">${filteredCases.length}</div><div class="text-sm text-slate-500 dark:text-slate-400">Casos Totales</div></div>
                        <div class="bg-white dark:bg-slate-700/50 p-4 rounded-lg shadow"><div class="text-3xl font-bold text-green-600 dark:text-green-400">${closedCases.length}</div><div class="text-sm text-slate-500 dark:text-slate-400">Casos Cerrados</div></div>
                    </div>
                    <div>
                        <h3 class="font-semibold text-slate-600 dark:text-slate-300 mb-2">Tiempos de Resolución (General)</h3>
                        <table class="w-full text-sm"><tbody>${Object.entries(overallClosureStats).map(([bucket, count]) => `<tr class="border-b border-slate-200 dark:border-slate-700"><td class="py-1.5 pr-2 text-slate-600 dark:text-slate-400">${bucket}</td><td class="py-1.5 font-mono text-right text-slate-800 dark:text-slate-300">${closedCases.length > 0 ? ((count / closedCases.length) * 100).toFixed(1) : 0}%</td><td class="py-1.5 pl-2 font-mono text-slate-500 dark:text-slate-400 text-right">(${count})</td></tr>`).join('')}</tbody></table>
                    </div>
                </div>
                <div class="mt-6">
                    <h3 class="font-semibold text-slate-600 dark:text-slate-300 mb-2">Actividad General por Agente</h3>
                    <table class="w-full md:w-1/2 text-sm text-left"><thead class="bg-slate-200 dark:bg-slate-700"><tr class="text-slate-600 dark:text-slate-300"><th class="p-2 font-semibold">Agente</th><th class="p-2 font-semibold">Creados</th><th class="p-2 font-semibold">Cerrados</th></tr></thead><tbody>${Object.entries(overallAgentActivity).map(([agent, data]) => `<tr class="border-b border-slate-200 dark:border-slate-700"><td class="p-2 font-medium text-slate-800 dark:text-slate-300">${agent}</td><td class="p-2 font-mono text-slate-800 dark:text-slate-300">${data.created}</td><td class="p-2 font-mono text-slate-800 dark:text-slate-300">${data.closed}</td></tr>`).join('')}</tbody></table>
                </div>
            </div>
            <div>
                <h2 class="text-2xl font-bold text-slate-700 dark:text-slate-200 mt-8 mb-4">Rendimiento Detallado por Agente</h2>
                <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    ${Object.entries(agentPerformance).filter(([,data])=>data.totalClosed > 0).map(([agent, data]) => `<div class="bg-white dark:bg-slate-800 p-5 rounded-xl shadow-lg border border-slate-200 dark:border-slate-700 space-y-4"><h3 class="text-xl font-bold text-indigo-700 dark:text-indigo-400">${agent}</h3><p class="text-sm text-slate-500 dark:text-slate-400 -mt-2">Total de casos cerrados: <strong>${data.totalClosed}</strong></p><div><h4 class="font-semibold text-slate-600 dark:text-slate-300 mb-2">Rendimiento General del Agente</h4><table class="w-full text-sm"><tbody>${Object.entries(data.overall).map(([bucket, count]) => `<tr class="border-b border-slate-100 dark:border-slate-700"><td class="py-1.5 pr-2 text-slate-600 dark:text-slate-400">${bucket}</td><td class="py-1.5 font-mono text-right text-slate-800 dark:text-slate-300">${((count/data.totalClosed)*100).toFixed(1)}%</td><td class="py-1.5 pl-2 font-mono text-slate-500 dark:text-slate-400 text-right">(${count})</td></tr>`).join('')}</tbody></table></div>${Object.keys(data.byReason).length > 0 ? `<div><h4 class="font-semibold text-slate-600 dark:text-slate-300 mt-4 mb-2">Desglose por Razón</h4><div class="space-y-3 max-h-60 overflow-y-auto pr-2">${Object.entries(data.byReason).map(([reason, reasonData]) => `<div class="bg-slate-50 dark:bg-slate-700/50 p-3 rounded-lg border border-slate-200 dark:border-slate-600"><p class="font-semibold text-indigo-800 dark:text-indigo-300 text-sm">${reason} <span class="font-normal text-slate-500 dark:text-slate-400">(${reasonData.total} cerrados)</span></p><table class="w-full text-xs mt-1"><tbody>${Object.entries(reasonData.stats).filter(([,c])=>c>0).map(([bucket, count]) => `<tr><td class="py-0.5 pr-2 text-slate-500 dark:text-slate-400">${bucket}</td><td class="py-0.5 font-mono text-right text-slate-800 dark:text-slate-300">${((count/reasonData.total)*100).toFixed(0)}%</td></tr>`).join('')}</tbody></table></div>`).join('')}</div></div>` : ''}</div>`).join('') || `<p class="lg:col-span-3 text-center text-slate-500 dark:text-slate-400">Ningún agente de la lista cerró casos en este período.</p>`}
                </div>
            </div>
            ${downloadHTML}
        `;
        
        if (finalCsvData.length > 0) {
            document.getElementById('downloadBtn').addEventListener('click', () => {
                const csvString = Papa.unparse(finalCsvData);
                const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `casos_${monthName}_${selectedYear}_procesados.csv`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
            });
        }
    }
        }
       

        // =================================================================
        // LÓGICA PARA EL ANALIZADOR SEMANAL (PESTAÑA 2)
        // =================================================================
        const processBtnWeek = document.getElementById('processBtnWeek');
        const resultsDivWeek = document.getElementById('resultsWeek');
        
        if(processBtnWeek) {
            processBtnWeek.disabled = true; // Deshabilitado hasta que se carguen datos
            processBtnWeek.addEventListener('click', () => {
                if (!processedDataStore) {
                    alert("Por favor, primero carga y procesa un archivo en la pestaña 'Análisis General'.");
                    return;
                }
                processBtnWeek.disabled = true;
                processBtnWeek.textContent = "Procesando...";
                resultsDivWeek.innerHTML = `<div class="text-center text-slate-500 dark:text-slate-400">Analizando datos...</div>`;
                try {
                    const analysis = processWeeklyData(processedDataStore); // Usa los datos guardados
                    displayWeeklyResults(analysis);
                } catch (error) {
                    console.error("Error en análisis semanal:", error);
                    resultsDivWeek.innerHTML = `<p class="text-red-500 font-semibold">Ocurrió un error: ${error.message}</p>`;
                } finally {
                    processBtnWeek.disabled = false;
                    processBtnWeek.textContent = "Analizar Semana con Datos Cargados";
                }
            });
        }
        
        function processWeeklyData(data) {
            // ... La lógica que teníamos en el componente ReclamosSemana va aquí
            const today = new Date();
            const oneWeekAgo = new Date(today);
            oneWeekAgo.setDate(today.getDate() - 7);
            oneWeekAgo.setHours(0, 0, 0, 0);

            let processedData = data.map(row => ({ ...row,
                'Nro de Case': row['Nro. Case'] ? parseInt(row['Nro. Case'].match(/>(\d+)</)?.[1], 10) : null,
                'Fecha de Creacion': row['Fecha Creación (FFHH)'] ? new Date(row['Fecha Creación (FFHH)']) : null,
            })).filter(row => row['Nro de Case'] && row['Fecha de Creacion'] && row['Fecha de Creacion'] >= oneWeekAgo);
            
            const uniqueCases = Array.from(new Map(processedData.map(item => [item['Nro de Case'], item])).values());
            
            const claimsByReason = uniqueCases.reduce((acc, caseItem) => {
                const reason = caseItem['Razón'] || 'No Especificado';
                if (!acc[reason]) acc[reason] = [];
                acc[reason].push(caseItem);
                return acc;
            }, {});

            return { claimsByReason, totalClaims: uniqueCases.length, startDate: oneWeekAgo };
        }

        function displayWeeklyResults(analysis) {
            // ... La lógica que teníamos en el componente ReclamosSemana va aquí
            const { claimsByReason, totalClaims, startDate } = analysis;
            const startDateString = startDate.toLocaleDateString('es-ES', { day: '2-digit', month: 'long' });
            if (totalClaims === 0) {
                resultsDivWeek.innerHTML = `<p class="text-center text-slate-600 dark:text-slate-400">No se encontraron reclamos desde el ${startDateString}.</p>`;
                return;
            }
            resultsDivWeek.innerHTML = `
                <div class="bg-slate-100 dark:bg-slate-800/50 p-6 rounded-2xl shadow-md border border-slate-200 dark:border-slate-700">
                    <h2 class="text-2xl font-bold text-slate-700 dark:text-slate-200 mb-4">${totalClaims} Reclamos desde el ${startDateString}</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        ${Object.entries(claimsByReason).map(([reason, cases]) => `<div class="bg-white dark:bg-slate-800 p-4 rounded-xl shadow-lg border border-slate-200 dark:border-slate-700"><h3 class="text-lg font-bold text-indigo-700 dark:text-indigo-400 mb-2">${reason} <span class="text-sm font-normal text-slate-500 dark:text-slate-400">(${cases.length})</span></h3><ul class="text-sm space-y-1 max-h-48 overflow-y-auto pr-2">${cases.map(c => `<li class="text-slate-700 dark:text-slate-300"><strong>Case #${c['Nro de Case']}:</strong> ${c['Subrazón'] || 'Sin subrazón'}</li>`).join('')}</ul></div>`).join('')}
                    </div>
                </div>`;
        }
        
        // --- Nota: Asegúrate de tener también aquí las funciones 'processData' y 'displayResults'
        // --- del analizador principal, que no he copiado para no hacer la respuesta excesivamente larga.
        // --- Debes copiarlas y pegarlas desde la respuesta anterior dentro de este script.
    </script>
</Layout>